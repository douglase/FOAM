FOAM - Modular Adaptive Optics Framework
========================================

In this document:

  1. Installation Instructions
  2. Installation Instructions For Dummies
  3. Troubleshooting
  4. Further information on the standard GNU installation procedure  
 
1. Installation Instructions
============================

FOAM follows the standard GNU installation procedure.  To compile FOAM
you will need an ANSI C-compiler.  After unpacking the distribution
the Makefiles can be prepared using the configure command,

  ./configure

You can then build the library by typing,

  make

All packages (i.e. sets of software and hardware modules) will be 
compiled by default, but this might not be possible or necessary in
your situation. The configure script takes extra command line options
such that you can configure which packages you want or do not want to
build. For an overview, run,

  ./configure --help

If you change any compilation options you will need to remove any
existing compiled files with,

  make clean 

                    ------------------------------

2. Installation Instructions For Dummies
========================================

These are complete install instructions on a clean machine using 
Debian 4.0. This guides you through the process of installing the system,
libraries that FOAM needs, and finally FOAM itself. Most steps have some
explanation on certain aspects of FOAM.

  - Install Debian as you like

FOAM runs on any system providing a nice compiler (like GCC) and the libraries it depends on (which include libevent, libgsl, ATLAS, lidgd, libpng and some others). FOAM should even run on OS X, although the hardware drivers necessary might not. Even if the hardware drivers are not available for OS X, you can still run simulation mode on OS X, if you want to test new tracking or correction mechanisms.

  - Set up AO user, or use another account 

FOAM does not require root privileges per se. However if you want to interact with hardware (i.e. reading/writing to serial ports, PCI boards, or something else), you generally require sufficient privileges to do this. 

One option is to chown/chmod all devices used (like /dev/ttyS0 for serial port 1) such that the user running FOAM can read/write these, another option is to run FOAM as root.

  - Download the latest version of FOAM

At the time of this writing, FOAM is available on my website at,

  http://www.phys.uu.nl/~0315133/foam/

The subdirectory tags/ holds all versions of FOAM I released, the directory docs/ holds some documentation about FOAM. Developer documentation is also available in the tags/ directory, although not all revisions have up-to-date documentation.

  - Untar/<gz|bz> the FOAM archive

  - Run 

                    ------------------------------

3. Troubleshooting
==================

If FOAM fails to compile for some reason, here are some hints to get you going.

./configure script is not present
=================================

If you obtained a version of FOAM without configure script, you can generate it yourself using the autotools. To do this, go to the FOAM directory which holds 'configure.ac' and run,

  # autoreconf -s -i

If things run smoothly, this does not produce any output, and the configure script is ready.

./configure script fails
========================

If the configure script fails, it is possible that you do not have pkg-config setup correctly on your system. This is at least an issue on OS X, where the preinstalled tools supplied with OS X might conflict with repository systems like fink or port. In that case, check the following:

- Make sure pkg-config is present, along with the autotools (autoconf, automake, autoreconf, aclocal, etc)
- Make sure ACLOCAL_FLAGS points to the directory holding the .m4 files (i.e. /usr/share/local or /sw/share/local for a default fink installation)
- Make sure PKG_CONFIG_PATH points to the pkg-config files (.pc) (i.e. /sw/lib/pkgconfig for a default fink installtion)

Linking fails
=============

If after compilation, linking all object files with the libraries fails, try the following:

- Make sure the necessary libraries are installed, as well as their dependencies.
- Make sure the linker (ld) knows where to find the libraries (again, on OS X there are also installed in /sw/lib, and you need to add -L/sw/lib when linking)

The make command outputs the compiler commands used. Check the failing command and try to see if the libraries required (-lxxxxx like -lm or -lgsl) are indeed in one of the directories specified by -L, OR in a default system directory.

                    ------------------------------

4. Further information on the standard GNU installation procedure
=================================================================

The sections below describe the general features of the standard GNU
installation procedure. These are not specific for FOAM and are 
actually taken from the GSL INSTALL file.

Basic Installation
==================

   These are generic installation instructions.

   The `configure' shell script attempts to guess correct values for
various system-dependent variables used during compilation.  It uses
those values to create a `Makefile' in each directory of the package.
It may also create one or more `.h' files containing system-dependent
definitions.  Finally, it creates a shell script `config.status' that
you can run in the future to recreate the current configuration, a file
`config.cache' that saves the results of its tests to speed up
reconfiguring, and a file `config.log' containing compiler output
(useful mainly for debugging `configure').

   If you need to do unusual things to compile the package, please try
to figure out how `configure' could check whether to do them, and mail
diffs or instructions to the address given in the `README' so they can
be considered for the next release.  If at some point `config.cache'
contains results you don't want to keep, you may remove or edit it.

   The file `configure.in' is used to create `configure' by a program
called `autoconf'.  You only need `configure.in' if you want to change
it or regenerate `configure' using a newer version of `autoconf'.

The simplest way to compile this package is:

  1. `cd' to the directory containing the package's source code and type
     `./configure' to configure the package for your system.  If you're
     using `csh' on an old version of System V, you might need to type
     `sh ./configure' instead to prevent `csh' from trying to execute
     `configure' itself.

     Running `configure' takes a while.  While running, it prints some
     messages telling which features it is checking for.

  2. Type `make' to compile the package.

  3. Optionally, type `make check' to run any self-tests that come with
     the package.

  4. Type `make install' to install the programs and any data files and
     documentation.

  5. You can remove the program binaries and object files from the
     source code directory by typing `make clean'.  To also remove the
     files that `configure' created (so you can compile the package for
     a different kind of computer), type `make distclean'.  There is
     also a `make maintainer-clean' target, but that is intended mainly
     for the package's developers.  If you use it, you may have to get
     all sorts of other programs in order to regenerate files that came
     with the distribution.

Compilers and Options
=====================

   Some systems require unusual options for compilation or linking that
the `configure' script does not know about.  You can give `configure'
initial values for variables by setting them in the environment.  Using
a Bourne-compatible shell, you can do that on the command line like
this:
     CC=c89 CFLAGS=-O2 LIBS=-lposix ./configure

Or on systems that have the `env' program, you can do it like this:
     env CPPFLAGS=-I/usr/local/include LDFLAGS=-s ./configure

Compiling For Multiple Architectures
====================================

   You can compile the package for more than one kind of computer at the
same time, by placing the object files for each architecture in their
own directory.  To do this, you must use a version of `make' that
supports the `VPATH' variable, such as GNU `make'.  `cd' to the
directory where you want the object files and executables to go and run
the `configure' script.  `configure' automatically checks for the
source code in the directory that `configure' is in and in `..'.

   If you have to use a `make' that does not supports the `VPATH'
variable, you have to compile the package for one architecture at a time
in the source code directory.  After you have installed the package for
one architecture, use `make distclean' before reconfiguring for another
architecture.

Installation Names
==================

   By default, `make install' will install the package's files in
`/usr/local/bin', `/usr/local/man', etc.  You can specify an
installation prefix other than `/usr/local' by giving `configure' the
option `--prefix=PATH'.

   You can specify separate installation prefixes for
architecture-specific files and architecture-independent files.  If you
give `configure' the option `--exec-prefix=PATH', the package will use
PATH as the prefix for installing programs and libraries.
Documentation and other data files will still use the regular prefix.

   If the package supports it, you can cause programs to be installed
with an extra prefix or suffix on their names by giving `configure' the
option `--program-prefix=PREFIX' or `--program-suffix=SUFFIX'.

Optional Features
=================

   Some packages pay attention to `--enable-FEATURE' options to
`configure', where FEATURE indicates an optional part of the package.
They may also pay attention to `--with-PACKAGE' options, where PACKAGE
is something like `gnu-as' or `x' (for the X Window System).  The
`README' should mention any `--enable-' and `--with-' options that the
package recognizes.

   For packages that use the X Window System, `configure' can usually
find the X include and library files automatically, but if it doesn't,
you can use the `configure' options `--x-includes=DIR' and
`--x-libraries=DIR' to specify their locations.

Specifying the System Type
==========================

   There may be some features `configure' can not figure out
automatically, but needs to determine by the type of host the package
will run on.  Usually `configure' can figure that out, but if it prints
a message saying it can not guess the host type, give it the
`--host=TYPE' option.  TYPE can either be a short name for the system
type, such as `sun4', or a canonical name with three fields:
     CPU-COMPANY-SYSTEM

See the file `config.sub' for the possible values of each field.  If
`config.sub' isn't included in this package, then this package doesn't
need to know the host type.

   If you are building compiler tools for cross-compiling, you can also
use the `--target=TYPE' option to select the type of system they will
produce code for and the `--build=TYPE' option to select the type of
system on which you are compiling the package.

Sharing Defaults
================

   If you want to set default values for `configure' scripts to share,
you can create a site shell script called `config.site' that gives
default values for variables like `CC', `cache_file', and `prefix'.
`configure' looks for `PREFIX/share/config.site' if it exists, then
`PREFIX/etc/config.site' if it exists.  Or, you can set the
`CONFIG_SITE' environment variable to the location of the site script.
A warning: not all `configure' scripts look for a site script.

Operation Controls
==================

   `configure' recognizes the following options to control how it
operates.

`--cache-file=FILE'
     Use and save the results of the tests in FILE instead of
     `./config.cache'.  Set FILE to `/dev/null' to disable caching, for
     debugging `configure'.

`--help'
     Print a summary of the options to `configure', and exit.

`--quiet'
`--silent'
`-q'
     Do not print messages saying which checks are being made.

`--srcdir=DIR'
     Look for the package's source code in directory DIR.  Usually
     `configure' can determine that directory automatically.

`--version'
     Print the version of Autoconf used to generate the `configure'
     script, and exit.

`configure' also accepts some other, not widely useful, options.
